C51 COMPILER V9.60.0.0   LCD                                                               08/28/2022 21:21:43 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE LCD
OBJECT MODULE PLACED IN .\Objects\lcd.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE lcd.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\lcd.l
                    -st) TABS(2) OBJECT(.\Objects\lcd.obj)

line level    source

   1          /* ********************************************************************
   2             FILE                   : lcd.c
   3          
   4             PROGRAM DESCRIPTION    : LCD library 
   5                                                   
   6             
   7             AUTHOR                : K.M. Arun Kumar alias Arunkumar Murugeswaran
   8             
   9             KNOWN BUGS            : 
  10          
  11             NOTE                  :                      
  12                                              
  13             CHANGE LOGS           : 
  14          
  15          *****************************************************************************/
  16          #include "main.h"
  17          
  18          lcd lcd_unit; 
  19          unsigned int lcd_avail_loc_within_limit = STATE_YES;
  20          unsigned int cur_disp_lcd_loc = BEGIN_LOC_LINE1, cur_input_lcd_loc = BEGIN_LOC_LINE2;
  21          unsigned int lcd_read_command_var;
  22          disp_format_t disp_format_data; 
  23          
  24          /*------------------------------------------------------------*
  25          FUNCTION NAME  : LCD_Init
  26          
  27          DESCRIPTION    :
  28                          
  29          INPUT          : 
  30          
  31          OUTPUT         : 
  32          
  33          NOTE           : 
  34          
  35          Func ID        :    
  36          -*------------------------------------------------------------*/
  37          void LCD_Init()
  38          {
  39   1        unsigned int lcd_func_command;
  40   1            
  41   1        #if (LCD_DATA_INTERFACE == DATA_INTERFACE_4_BITS)
  42   1          lcd_unit.conf.interface = DATA_INTERFACE_4_BITS;     
  43   1        #else
                  lcd_unit.conf.interface = DATA_INTERFACE_8_BITS;
                #endif
  46   1        
  47   1        #if (LCD_BUSY_FLAG == CHECK_BUSY_FLAG)
                  lcd_unit.conf.check_bf = CHECK_BUSY_FLAG;
                  /*  #ifdef TRACE
                     UART_Transmit_Str("LCD check BUSY Flag \r");
                  #endif */
                  ERROR_LED = 1;
                  return; 
                #else
C51 COMPILER V9.60.0.0   LCD                                                               08/28/2022 21:21:43 PAGE 2   

  55   1          lcd_unit.conf.check_bf = NO_CHECK_BUSY_FLAG;
  56   1          /*   #ifdef TRACE
  57   1             UART_Transmit_Str("LCD dont check BUSY Flag \r");
  58   1          #endif */
  59   1        #endif  
  60   1        LCD_DATA_PORT = 0x00; 
  61   1        //  wait for more than 15ms after LCD VSS rises to 4.5V, Busy Flag in LCD (BF) cannot be checked 
  62   1        Delay_in_Milli_Sec(1500UL);
  63   1          LCD_Write_Command_NO_BF(0x30);
  64   1        // wait for more than 4.1 ms, Busy Flag in LCD (BF) cannot be checked 
  65   1        Delay_in_Milli_Sec(10);
  66   1          LCD_Write_Command_NO_BF(0x30);
  67   1        // wait for more than 100 us, Busy Flag in LCD (BF) cannot be checked 
  68   1        Delay_in_Milli_Sec(1);
  69   1          LCD_Write_Command_NO_BF(0x30);
  70   1        Delay_in_Milli_Sec(1);
  71   1        if(lcd_unit.conf.interface == DATA_INTERFACE_4_BITS)
  72   1        {   
  73   2           LCD_Write_Command_NO_BF(0x20);     
  74   2        } 
  75   1        lcd_func_command = 0x20;
  76   1        Write_Bit_in_Data(&lcd_func_command , 4, lcd_unit.conf.interface);
  77   1        Write_Bit_in_Data(&lcd_func_command , 3, LCD_MAX_DISP_NUM_LINES);
  78   1        Write_Bit_in_Data(&lcd_func_command , 2, LCD_CHAR_FONT);
  79   1        LCD_Write_Command(lcd_func_command);    
  80   1        //LCD_Write_Command(0x28);
  81   1          
  82   1          /* #ifdef TRACE
  83   1           to_disp.unsigned_val.value_long = lcd_func_command;
  84   1             UART_Transmit_Str("LCD Func Set: 0x");
  85   1           UART_Transmit_Num(DISP_HEX_DIGIT2, to_disp);
  86   1           UART_Transmit_Char('\r');
  87   1        #endif */
  88   1           
  89   1          LCD_Write_Command(0x08);
  90   1        LCD_Clear_Screen();
  91   1        LCD_Write_Command(0x06);  
  92   1        LCD_Write_Command(0x0E);
  93   1        
  94   1        return; 
  95   1      } 
  96          /*------------------------------------------------------------*
  97          FUNCTION NAME  : LCD_Clear_Screen
  98          
  99          DESCRIPTION    :
 100                          
 101          INPUT          : none
 102          
 103          OUTPUT         : 
 104          
 105          NOTE           : 
 106          
 107          Func ID        :   
 108          -*------------------------------------------------------------*/
 109          void LCD_Clear_Screen()
 110          {
 111   1        LCD_Write_Command(0x01);
 112   1        Delay_in_Micro_Sec(LCD_CLEAR_EXEC_IN_USEC); 
 113   1        return; 
 114   1      }
 115           /*------------------------------------------------------------*
 116          FUNCTION NAME  : LCD_Write_Command
C51 COMPILER V9.60.0.0   LCD                                                               08/28/2022 21:21:43 PAGE 3   

 117          
 118          DESCRIPTION    :
 119                          
 120          INPUT          : none
 121          
 122          OUTPUT         : 
 123          
 124          NOTE           : 
 125          
 126          Func ID        :   
 127          -*------------------------------------------------------------*/
 128          void LCD_Write_Command_NO_BF(const unsigned int lcd_cmd)
 129          {
 130   1        //after LCD is not busy 
 131   1        Delay_in_Milli_Sec(1);
 132   1          
 133   1          LCD_RW = 0;
 134   1          LCD_RS = 0;
 135   1         
 136   1          Delay_in_Micro_Sec(LCD_ADDR_SETUP_IN_USEC);   
 137   1          LCD_EN = 1;
 138   1          Delay_in_Micro_Sec(LCD_ENABLE_PULSE_BEFORE_WRITE_IN_USEC);
 139   1        LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (lcd_cmd & 0xF0); 
 140   1        Delay_in_Micro_Sec(LCD_DATA_SETUP_IN_USEC);
 141   1          LCD_EN = 0;
 142   1             //SHOULD_REMOVE
 143   1             //UART_Transmit_Char(LCD_DATA_PORT);
 144   1        
 145   1          Delay_in_Micro_Sec(LCD_OTHER_INST_EXEC_IN_USEC);  
 146   1        return; 
 147   1         
 148   1      }
 149          
 150          /*------------------------------------------------------------*
 151          FUNCTION NAME  : LCD_Write_Command
 152          
 153          DESCRIPTION    :
 154                          
 155          INPUT          : none
 156          
 157          OUTPUT         : 
 158          
 159          NOTE           : 
 160          
 161          Func ID        :   
 162          -*------------------------------------------------------------*/
 163          void LCD_Write_Command(const unsigned int lcd_cmd)
 164          {
 165   1        //after LCD is not busy 
 166   1        Delay_in_Milli_Sec(1);
 167   1          
 168   1         LCD_RW = 0;
 169   1         LCD_RS = 0;
 170   1         
 171   1          Delay_in_Micro_Sec(LCD_ADDR_SETUP_IN_USEC);   
 172   1          LCD_EN = 1;
 173   1          Delay_in_Micro_Sec(LCD_ENABLE_PULSE_BEFORE_WRITE_IN_USEC);
 174   1        if(lcd_unit.conf.interface == DATA_INTERFACE_4_BITS)
 175   1        {
 176   2            // send higher nibble first and higher port nibble of LCD PORT is connected to LCD(DB4 - DB7)  
 177   2              LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | (lcd_cmd & 0xF0); 
 178   2            Delay_in_Micro_Sec(LCD_DATA_SETUP_IN_USEC);
C51 COMPILER V9.60.0.0   LCD                                                               08/28/2022 21:21:43 PAGE 4   

 179   2              LCD_EN = 0;
 180   2              //SHOULD_REMOVE
 181   2              //UART_Transmit_Char(LCD_DATA_PORT);
 182   2              Delay_in_Micro_Sec(LCD_OTHER_INST_EXEC_IN_USEC);   
 183   2         
 184   2              Delay_in_Micro_Sec(LCD_ADDR_SETUP_IN_USEC);   
 185   2              LCD_EN = 1;
 186   2              Delay_in_Micro_Sec(LCD_ENABLE_PULSE_BEFORE_WRITE_IN_USEC);
 187   2            // send lower nibble and higher port nibble of LCD PORT is connected to LCD(DB4 - DB7)   
 188   2              LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((lcd_cmd << 4) & 0xF0); 
 189   2        }
 190   1          else
 191   1        { 
 192   2              LCD_DATA_PORT = (lcd_cmd); 
 193   2        }
 194   1         Delay_in_Micro_Sec(LCD_DATA_SETUP_IN_USEC);
 195   1           LCD_EN = 0;
 196   1             //SHOULD_REMOVE
 197   1             //UART_Transmit_Char(LCD_DATA_PORT);
 198   1        
 199   1          Delay_in_Micro_Sec(LCD_OTHER_INST_EXEC_IN_USEC);  
 200   1        return; 
 201   1         
 202   1      }
 203          /*------------------------------------------------------------*
 204          FUNCTION NAME  : LCD_Write_Data
 205          
 206          DESCRIPTION    :
 207                          
 208          INPUT          : 
 209          
 210          OUTPUT         : 
 211          
 212          NOTE           : 
 213          
 214          Func ID        :    
 215          -*------------------------------------------------------------*/
 216           void LCD_Write_Data(const char lcd_data)
 217          {
 218   1        //after LCD is not busy 
 219   1        Delay_in_Milli_Sec(1);
 220   1        LCD_RW = 0;
 221   1          LCD_RS = 1;
 222   1        
 223   1        Delay_in_Micro_Sec(LCD_ADDR_SETUP_IN_USEC);   
 224   1          LCD_EN = 1;
 225   1          Delay_in_Micro_Sec(LCD_ENABLE_PULSE_BEFORE_WRITE_IN_USEC);
 226   1        if(lcd_unit.conf.interface == DATA_INTERFACE_4_BITS)
 227   1        {
 228   2            // send higher nibble first and higher port nibble of LCD PORT must be connected to LCD(DB4 - DB7)    
             - 
 229   2              LCD_DATA_PORT =  (LCD_DATA_PORT & 0x0F) | (lcd_data & 0xF0); 
 230   2            Delay_in_Micro_Sec(LCD_DATA_SETUP_IN_USEC);
 231   2              LCD_EN = 0;
 232   2              //SHOULD_REMOVE
 233   2              //UART_Transmit_Char(LCD_DATA_PORT);
 234   2            Delay_in_Micro_Sec (LCD_OTHER_INST_EXEC_IN_USEC);    
 235   2         
 236   2             Delay_in_Micro_Sec (LCD_ADDR_SETUP_IN_USEC);   
 237   2             LCD_EN  = 1;
 238   2             Delay_in_Micro_Sec(LCD_ENABLE_PULSE_BEFORE_WRITE_IN_USEC);
 239   2           // send lower nibble and higher port nibble of LCD PORT must be connected to LCD (DB4 - DB7)    
C51 COMPILER V9.60.0.0   LCD                                                               08/28/2022 21:21:43 PAGE 5   

 240   2             LCD_DATA_PORT = (LCD_DATA_PORT & 0x0F) | ((lcd_data << 4) & 0xF0);  
 241   2        }
 242   1        else
 243   1        {
 244   2          LCD_DATA_PORT = (lcd_data ); 
 245   2        }
 246   1          Delay_in_Micro_Sec(LCD_DATA_SETUP_IN_USEC);
 247   1          LCD_EN = 0;
 248   1          //SHOULD_REMOVE
 249   1          //UART_Transmit_Char(LCD_DATA_PORT);
 250   1          Delay_in_Micro_Sec(LCD_OTHER_INST_EXEC_IN_USEC);
 251   1         return;  
 252   1      }
 253          
 254          /*------------------------------------------------------------*
 255          FUNCTION NAME  : LCD_Disp_Str
 256          
 257          DESCRIPTION    :
 258                          
 259          INPUT          : 
 260          
 261          OUTPUT         : 
 262          
 263          NOTE           : 
 264          
 265          Func ID        :    
 266          -*------------------------------------------------------------*/
 267          void LCD_Disp_Str(const char *char_ptr)
 268          { 
 269   1             char cur_char;
 270   1           
 271   1             while(*char_ptr)
 272   1             {
 273   2              cur_char = *(char_ptr++);
 274   2                  LCD_Write_Data(cur_char);
 275   2            //UART_Transmit_Char(cur_char);
 276   2             }
 277   1           //UART_Transmit_Char('\r');   
 278   1            return;      
 279   1      }
 280          
 281          /*------------------------------------------------------------*
 282          FUNCTION NAME  : LCD_Disp_Num
 283          
 284          DESCRIPTION    :
 285                          
 286          INPUT          : 
 287          
 288          OUTPUT         : 
 289          
 290          NOTE           : 
 291          
 292          Func ID        :   
 293          -*------------------------------------------------------------*/
 294           void LCD_Disp_Num(const disp_format_t lcd_disp_data)
 295          {
 296   1          unsigned int tens_thousand_digit,thousands_digit, hundreds_digit,tens_digit, unit_digit;
 297   1        unsigned long disp_num, num ;
 298   1        char num_data[] ={'0','1','2','3','4','5','6','7','8','9'};  
 299   1        char hex_data[] ={'0','1','2','3','4','5','6','7','8','9','A','B','C','D','E','F'}; 
 300   1          
 301   1        if(lcd_disp_data.disp_sign  == STATE_YES) //signed lcd_datanum_disp_format
C51 COMPILER V9.60.0.0   LCD                                                               08/28/2022 21:21:43 PAGE 6   

 302   1        {
 303   2          if(lcd_disp_data.disp_data < 0 )
 304   2          {
 305   3            LCD_Write_Data('-');
 306   3            disp_num = -lcd_disp_data.disp_data;
 307   3          }
 308   2              else
 309   2          {
 310   3            LCD_Write_Data('+');
 311   3            disp_num = lcd_disp_data.disp_data;
 312   3          }        
 313   2        }
 314   1        else
 315   1        {
 316   2            disp_num = lcd_disp_data.disp_data; 
 317   2        }
 318   1        num =  disp_num ;
 319   1        
 320   1          switch(lcd_disp_data.num_digits_format)
 321   1        {
 322   2          case DISP_NUM_DIGIT5:
 323   2            num =  disp_num ;
 324   2            tens_thousand_digit = (unsigned int)(num / (unsigned long)(10000UL));
 325   2                LCD_Write_Data(num_data[tens_thousand_digit]);
 326   2          case DISP_NUM_DIGIT4:
 327   2              num = disp_num % 10000UL;
 328   2              thousands_digit = (unsigned int)(num / (unsigned long)(1000UL));
 329   2              LCD_Write_Data(num_data[thousands_digit]); 
 330   2          case DISP_NUM_DIGIT3:
 331   2              num = disp_num % 1000UL;
 332   2              hundreds_digit = (unsigned int) (num / (unsigned long) (100));
 333   2              LCD_Write_Data(num_data[hundreds_digit]);
 334   2          case DISP_NUM_DIGIT2:
 335   2              num = disp_num % 100;
 336   2                tens_digit = (unsigned int) (num / 10);
 337   2                LCD_Write_Data(num_data[tens_digit]);       
 338   2          case DISP_NUM_DIGIT1:
 339   2              unit_digit = (unsigned int) (disp_num % 10);
 340   2                LCD_Write_Data(num_data[unit_digit]); 
 341   2          break;
 342   2          case DISP_HEX_DIGIT4:
 343   2              //  ( 16 * 16 * 16 *16 )  = 0 as divide by zero warning 
 344   2              //num = disp_num % ( 16 * 16 * 16 *16 );
 345   2                thousands_digit = (num / (unsigned long) (16 * 16 * 16));
 346   2              LCD_Write_Data(hex_data[thousands_digit]);
 347   2          case DISP_HEX_DIGIT3:
 348   2              num = disp_num %(unsigned long)(16 * 16 * 16);
 349   2              hundreds_digit = (unsigned int) (num / (unsigned long) (16 * 16));
 350   2              LCD_Write_Data(hex_data[hundreds_digit]);
 351   2          case DISP_HEX_DIGIT2:
 352   2              num = disp_num %(unsigned long)(16 * 16);
 353   2                tens_digit = (unsigned int) (num / 16);
 354   2                LCD_Write_Data(hex_data[tens_digit]);
 355   2          case DISP_HEX_DIGIT1: 
 356   2              unit_digit = (unsigned int) (disp_num % 16);
 357   2                LCD_Write_Data(hex_data[unit_digit]);    
 358   2          break;
 359   2          
 360   2        } 
 361   1          return;     
 362   1      }
 363          
C51 COMPILER V9.60.0.0   LCD                                                               08/28/2022 21:21:43 PAGE 7   

 364          /*------------------------------------------------------------*
 365          FUNCTION NAME  : LCD_Disp_Goto_XY
 366          
 367          DESCRIPTION    :
 368                          
 369          INPUT          : 
 370          
 371          OUTPUT         : 
 372          
 373          NOTE           : 
 374          
 375          Func ID        :    
 376          -*------------------------------------------------------------*/
 377          void LCD_Disp_Goto_XY(const unsigned int start_line_num, const unsigned int start_col_num)
 378          {
 379   1        /* max 4 lines and 20 columns */
 380   1        /* for us, lcd col starts from 1, but for uC, col starts from 0 */
 381   1          unsigned int start_col_lcd = start_col_num - 1 ; 
 382   1        lcd_avail_loc_within_limit = STATE_YES;
 383   1        
 384   1         if(start_line_num <= CONFIGURE_MAX_NUM_LINES && start_col_num <= CONFIGURE_MAX_NUM_COLS )
 385   1         {
 386   2           switch(start_line_num)
 387   2         {
 388   3           case NUM_LINE1:
 389   3             cur_disp_lcd_loc = BEGIN_LOC_LINE_NUM_01;
 390   3             break;
 391   3           case NUM_LINE2:
 392   3             cur_disp_lcd_loc = BEGIN_LOC_LINE_NUM_02;
 393   3             break;
 394   3           case NUM_LINE3:
 395   3             cur_disp_lcd_loc = BEGIN_LOC_LINE_NUM_03;
 396   3             break;
 397   3            case NUM_LINE4:
 398   3             cur_disp_lcd_loc = BEGIN_LOC_LINE_NUM_04 ;
 399   3             break;    
 400   3         }  
 401   2            cur_disp_lcd_loc = cur_disp_lcd_loc + start_col_lcd;
 402   2            LCD_Write_Command(cur_disp_lcd_loc);       
 403   2         }
 404   1         else
 405   1         {
 406   2           /* error due to invalid lcd DISP loc  */
 407   2             lcd_avail_loc_within_limit = STATE_NO; 
 408   2         }
 409   1         return;   
 410   1      } 
 411          
 412          /*-------------------------------------------------------------------
 413            ------------------------ END OF FILE ------------------------------
 414          -------------------------------------------------------------------*/


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =   1212    ----
   CONSTANT SIZE    =     26    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =     16      59
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.

C51 COMPILER V9.60.0.0   LCD                                                               08/28/2022 21:21:43 PAGE 8   


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
