C51 COMPILER V9.60.0.0   MCP3202                                                           08/28/2022 21:21:43 PAGE 1   


C51 COMPILER V9.60.0.0, COMPILATION OF MODULE MCP3202
OBJECT MODULE PLACED IN .\Objects\mcp3202.obj
COMPILER INVOKED BY: C:\Keil_v5\C51\BIN\C51.EXE mcp3202.c OPTIMIZE(8,SPEED) BROWSE DEBUG OBJECTEXTEND PRINT(.\Listings\m
                    -cp3202.lst) TABS(2) OBJECT(.\Objects\mcp3202.obj)

line level    source

   1          /* ********************************************************************
   2          FILE                 : mcp3202.c
   3          
   4          PURPOSE              : 
   5             
   6          AUTHOR               : K.M. Arun Kumar alias Arunkumar Murugeswaran
   7             
   8          KNOWN BUGS           : 
   9          
  10          NOTE                 : MCU implementation supports only MSB First ADC Conversation.                   
  11          
  12          CHANGE LOGS          :
  13          
  14          *****************************************************************************/
  15          
  16          #include "main.h"
  17          
  18          // ------  data type declarations ---------------------------
  19          
  20          
  21          // ------  function prototypes ------------------------------
  22          
  23          
  24          // ------  constants ----------------------------------------
  25          
  26          
  27          
  28          // ------  variables ----------------------------------------
  29          
  30          
  31          
  32          /*------------------------------------------------------------*-
  33          FUNCTION NAME  : MCP3202_Init
  34          
  35          DESCRIPTION    :               
  36          
  37          INPUT          : 
  38          
  39          OUTPUT         : 
  40          
  41          NOTE           : 
  42          -*------------------------------------------------------------*/
  43          void MCP3202_ADC_Init(void)
  44          {
  45   1         ADC_DO = 1; //ADC_DO is input pin for MCU
  46   1         ADC_DI = 0; //ADC_DI is output pin for MCU
  47   1         ADC_CLK = 0; //ADC_CLK is output pin for MCU
  48   1         ADC_CS = 0; //ADC_CS is output pin for MCU
  49   1         return;
  50   1      }
  51          
  52          /*------------------------------------------------------------*-
  53          FUNCTION NAME  : MCP3202_ADC_Read_Proc
  54          
C51 COMPILER V9.60.0.0   MCP3202                                                           08/28/2022 21:21:43 PAGE 2   

  55          DESCRIPTION    :  MCP3202 ADC module with SPI interface
  56             
  57          INPUT          :  
  58          
  59          OUTPUT         :  
  60          
  61          NOTE           : 
  62          -*------------------------------------------------------------*/
  63          unsigned long MCP3202_ADC_Read_Proc(const unsigned char adc_conf)
  64          {
  65   1          unsigned char i,k = 0;
  66   1        unsigned int SPI_MCU_Tx, SPI_MCU_Rx, spi_mode; 
  67   1          unsigned long adc_result = 0 ;  //12 bit
  68   1        
  69   1        spi_mode = ((adc_conf) & (0x03 << ADC_SPI_MODE_BIT_POS)) >> ADC_SPI_MODE_BIT_POS; 
  70   1        /* #ifdef TRACE
  71   1          printf("SPI mode : %u \r", spi_mode);
  72   1        #endif */
  73   1        
  74   1        switch(spi_mode)
  75   1        {
  76   2          case SPI_MODE_0:
  77   2          case SPI_MODE_1:
  78   2             ADC_CLK = 0;             // make clock low first, clock idle state is 0
  79   2          break;
  80   2              case SPI_MODE_2:
  81   2          case SPI_MODE_3:
  82   2                 ADC_CLK = 1;              // make clock high first, clock idle state is 1         
  83   2          break;    
  84   2        }
  85   1        k++; k++; 
  86   1        ADC_CS = 0;   // Active chip select
  87   1          k++;          // Delay about 1 uS   
  88   1        SPI_MCU_Rx = 0x00; 
  89   1        SPI_MCU_Tx = 0x01; // LSB with Start Bit  
  90   1        for (i = 0; i < 8; ++i)
  91   1        {
  92   2          ADC_DI = Test_Bit_Is_Set_in_Data(&SPI_MCU_Tx, (7 - i)); // Transmit MSB first on clocks's falling edge w
             -ith clock idle state 0 or 1         
  93   2          ADC_CLK = !ADC_CLK; 
  94   2          //ADC_CLK = 1; //
  95   2            k++;k++;    
  96   2          SPI_MCU_Rx |= ((ADC_DO && 1) << (7 - i));   // Receive MSB first on clocks's rising edge with clock idle
             - state 0 or 1
  97   2          ADC_CLK = !ADC_CLK;
  98   2          //ADC_CLK = 0; 
  99   2            k++;k++;    
 100   2        }
 101   1        SPI_MCU_Tx = 0x00;  
 102   1        if(adc_conf & (1 << ADC_SGL_DIFF_MODE_BIT_POS)) 
 103   1        {
 104   2            SPI_MCU_Tx |= (1 << 7);
 105   2        }
 106   1        if(adc_conf & (1 << ADC_ODD_SIGN_MODE_BIT_POS)) 
 107   1        {
 108   2          SPI_MCU_Tx |= (1 << 6);
 109   2        }
 110   1        if(adc_conf & (1 << ADC_MSB_FIRST_MODE_BIT_POS)) 
 111   1        {
 112   2          SPI_MCU_Tx |= (1 << 5);
 113   2        } 
 114   1        SPI_MCU_Rx = 0x00;
C51 COMPILER V9.60.0.0   MCP3202                                                           08/28/2022 21:21:43 PAGE 3   

 115   1          for (i = 0; i < 8; ++i)
 116   1        {
 117   2          ADC_DI = Test_Bit_Is_Set_in_Data(&SPI_MCU_Tx, (7 - i)); // Transmit MSB first on clocks's falling edge w
             -ith clock idle state 0 or 1 
 118   2          ADC_CLK = !ADC_CLK;
 119   2          //ADC_CLK = 1;            
 120   2            k++;k++;  
 121   2          SPI_MCU_Rx |=  ((ADC_DO && 1) << (7 - i)); // Receive MSB first on clocks's rising edge with clock idle 
             -state 0 or 1
 122   2          ADC_CLK = !ADC_CLK;
 123   2          //ADC_CLK = 0; 
 124   2            k++;k++;
 125   2        } 
 126   1        adc_result = ((SPI_MCU_Rx & 0x0F) << 8);
 127   1        //  adc_result[1] = SPI_MCU_Rx & 0x0F;
 128   1        SPI_MCU_Rx = 0x00;
 129   1        SPI_MCU_Tx = 0x00;  
 130   1        for (i = 0; i < 8; ++i)
 131   1        {
 132   2          ADC_DI = Test_Bit_Is_Set_in_Data(&SPI_MCU_Tx, (7 - i)); // Transmit MSB first on clocks's falling edge w
             -ith clock idle state 0 or 1 
 133   2          ADC_CLK = !ADC_CLK;
 134   2          //ADC_CLK = 1;            
 135   2            k++;k++;  
 136   2          SPI_MCU_Rx |= ((ADC_DO && 1) << (7 - i)); // Receive MSB first on clocks's rising edge with clock idle s
             -tate 0 or 1
 137   2          ADC_CLK = !ADC_CLK;
 138   2          //ADC_CLK = 0; 
 139   2            k++;k++;
 140   2        }
 141   1        ADC_CS = 1;   
 142   1        adc_result = (adc_result & 0xFF00L) | (SPI_MCU_Rx & 0x00FFL);
 143   1        //adc_result[0] = SPI_MCU_Rx; 
 144   1        return adc_result;
 145   1      }
 146          
 147          /*------------------------------------------------------------*
 148          FUNCTION NAME  : 
 149          
 150          DESCRIPTION    :
 151                          
 152          INPUT          : none
 153          
 154          OUTPUT         : 
 155          
 156          NOTE           : 
 157          
 158          Func ID        : 21   
 159          -*------------------------------------------------------------*/
 160          void Encoded_To_Actual_Analog_Val_Calc(const unsigned long adc_value, unsigned long int full_scale_analog_
             -val, \
 161             unsigned long int min_analog_val, unsigned long *const analog_val_in_digital_int, unsigned long *const 
             -analog_val_in_digital_frac )
 162          {
 163   1        unsigned long remainder_val;  
 164   1        *analog_val_in_digital_int = ((full_scale_analog_val * adc_value) /  (MAX_ADC_VALUE)) + min_analog_val;
 165   1        remainder_val = (full_scale_analog_val * adc_value) %  MAX_ADC_VALUE ;
 166   1        *analog_val_in_digital_frac = (remainder_val * 10) / MAX_ADC_VALUE;
 167   1      }
 168          /*------------------------------------------------------------*
 169          FUNCTION NAME  : 
 170          
C51 COMPILER V9.60.0.0   MCP3202                                                           08/28/2022 21:21:43 PAGE 4   

 171          DESCRIPTION    :
 172                          
 173          INPUT          : none
 174          
 175          OUTPUT         : 
 176          
 177          NOTE           : 
 178          
 179          Func ID        : 21   
 180          -*------------------------------------------------------------*/
 181          void Encoded_To_Percent_Calc(const unsigned long adc_value, unsigned int *const percent_int, unsigned int 
             -*const percent_frac )
 182          {
 183   1        unsigned int remainder_val;
 184   1        unsigned long temp_percent_int;
 185   1        temp_percent_int =  (100 * adc_value); 
 186   1        *percent_int = (100 * adc_value) /  MAX_ADC_VALUE;
 187   1        remainder_val = temp_percent_int %  MAX_ADC_VALUE;
 188   1        *percent_frac = (remainder_val * 10) / MAX_ADC_VALUE;
 189   1      }
 190          
 191          /* -------------------------------------------------------------------
 192            ---- END OF FILE -------------------------------------------------
 193          ------------------------------------------------------------------- */


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    709    ----
   CONSTANT SIZE    =   ----    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =   ----      42
   IDATA SIZE       =   ----    ----
   BIT SIZE         =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
